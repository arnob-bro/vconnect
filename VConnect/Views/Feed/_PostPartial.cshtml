@using System.Security.Claims
@model VConnect.Models.SOS.SosPost

<style>
    .sos-card {
        border: none;
        border-radius: 16px;
        background: #1b2832; /* Dark navy gray */
        color: #f2f2f2; /* Light text */
        box-shadow: 0 4px 16px rgba(0,0,0,0.4);
        transition: transform 0.2s ease, box-shadow 0.2s ease;
        overflow: hidden;
    }

        .sos-card:hover {
            transform: translateY(-4px);
            box-shadow: 0 8px 24px rgba(0,0,0,0.6);
        }

    .sos-header h5 {
        font-weight: 700;
        color: #ff8800; /* Accent color for names */
    }

    .sos-header small {
        font-size: 0.9rem;
        color: #e7f3fe;
    }

    .sos-meta {
        font-size: 0.85rem;
        color: #cfcfcf;
    }

        .sos-meta i {
            color: #ff8800;
        }

    .sos-badge {
        font-size: 0.85rem;
        padding: 0.4em 0.75em;
        border-radius: 50px;
        font-weight: 600;
    }

    .sos-desc {
        font-size: 1rem;
        line-height: 1.5;
        margin-top: 1rem;
        color: #f2f2f2;
    }

    .sos-contact {
        font-size: 0.9rem;
        color: #fff;
        background: rgba(255, 255, 255, 0.1);
        border-radius: 8px;
        padding: 8px 12px;
        display: inline-block;
    }

        .sos-contact i {
            color: #28a745;
        }

    .sos-actions .btn {
        border-radius: 50px;
        font-size: 0.85rem;
    }

    .sos-comment-box .form-control {
        border-radius: 20px 0 0 20px;
        background: #2a3b47;
        color: #fff;
        border: 1px solid #444;
    }

        .sos-comment-box .form-control::placeholder {
            color: #aaa;
        }

    .sos-comment-box .btn {
        border-radius: 0 20px 20px 0;
    }

    .sos-comments {
        border-top: 1px solid #444;
        margin-top: 1rem;
        padding-top: 1rem;
    }
</style>


<div class="card sos-card mb-4" id="post-@Model.Id">
    <div class="card-body">
        <!-- Header -->
        <div class="d-flex justify-content-between align-items-start sos-header">
            <div>
                <h5 class="mb-1">
                    @(!string.IsNullOrWhiteSpace(Model.Name) ? Model.Name : "Guest")
                    <small>@Model.EmergencyType</small>
                </h5>
                <div class="sos-meta">
                    <i class="fa-regular fa-clock me-1"></i>@Model.CreatedAt.ToLocalTime().ToString("g")
                    @if (!string.IsNullOrWhiteSpace(Model.Location))
                    {
                        <span class="ms-3"><i class="fa-solid fa-location-dot me-1"></i>@Model.Location</span>
                    }
                </div>
            </div>

            <div class="text-end">
                <span class="badge sos-badge bg-@((Model.Status?.Equals("Completed", StringComparison.OrdinalIgnoreCase) ?? false) ? "success" : (Model.Status?.Equals("Urgent", StringComparison.OrdinalIgnoreCase) ?? false) ? "danger" : "warning") me-2">
                    @Model.Status
                </span>
                <span class="badge sos-badge @(Model.IsAcceptingHelp ? "bg-primary" : "bg-secondary")">
                    @(Model.IsAcceptingHelp ? "Accepting help" : "Not accepting")
                </span>
            </div>
        </div>

        <!-- Description -->
        @if (!string.IsNullOrWhiteSpace(Model.Description))
        {
            <p class="sos-desc">@Model.Description</p>
        }

        <!-- Contact -->
        @if (!string.IsNullOrWhiteSpace(Model.Contact))
        {
            <div class="sos-contact mt-2">
                <i class="fa-solid fa-phone me-1"></i>@Model.Contact
            </div>
        }

        <!-- Lat/Lng -->
        @if (Model.Latitude.HasValue && Model.Longitude.HasValue)
        {
            <div class="sos-meta mt-2">
                <i class="fa-solid fa-location-crosshairs me-1"></i>
                Lat: @Model.Latitude.Value.ToString("F6"), Lng: @Model.Longitude.Value.ToString("F6")
            </div>
        }

        <!-- Action buttons -->
        <div class="d-flex gap-2 mt-3 sos-actions">
            @{
                var currentUserEmail = User.FindFirstValue(ClaimTypes.Email);
                if (!string.IsNullOrEmpty(currentUserEmail) && Model.Contact == currentUserEmail)
                {
                    <form asp-controller="Sos" asp-action="ToggleAvailability" method="post" class="d-inline">
                        @Html.AntiForgeryToken()
                        <input type="hidden" name="id" value="@Model.Id" />
                        <button type="submit" class="btn btn-sm @(Model.IsAcceptingHelp ? "btn-outline-primary" : "btn-primary")">
                            <i class="fa-solid fa-person-circle-check me-1"></i>
                            @(Model.IsAcceptingHelp ? "Pause accepting" : "Start accepting")
                        </button>
                    </form>

                    <form asp-controller="Sos" asp-action="MarkCompleted" method="post" class="d-inline">
                        @Html.AntiForgeryToken()
                        <input type="hidden" name="id" value="@Model.Id" />
                        <button type="submit" class="btn btn-sm btn-success">
                            <i class="fa-solid fa-check me-1"></i> Mark completed
                        </button>
                    </form>

                    <form asp-controller="Sos" asp-action="Delete" method="post" class="ms-auto">
                        @Html.AntiForgeryToken()
                        <input type="hidden" name="id" value="@Model.Id" />
                        <button type="submit" class="btn btn-sm btn-outline-danger">
                            <i class="fa-solid fa-trash me-1"></i> Delete
                        </button>
                    </form>
                }
            }
        </div>

        <!-- New comment -->
        <form asp-controller="Sos" asp-action="AddComment" method="post" class="mt-3 sos-comment-box">
            @Html.AntiForgeryToken()
            <input type="hidden" name="postId" value="@Model.Id" />
            <div class="input-group">
                <input type="text" name="message" class="form-control" placeholder="Write a comment..." required />
                <button class="btn btn-primary" type="submit">
                    <i class="fa-regular fa-paper-plane me-1"></i>Post
                </button>
            </div>
        </form>

        <!-- Comments -->
        @if (Model.Comments != null && Model.Comments.Any())
        {
            <div class="sos-comments">
                @foreach (var c in Model.Comments.Where(x => x.ParentCommentId == null && !x.IsDeleted).OrderBy(x => x.CreatedAt))
                {
                    @await Html.PartialAsync("_CommentPartial", c)
                }
            </div>
        }
    </div>
</div>
