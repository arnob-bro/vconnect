@using System.Security.Claims
@model VConnect.Models.SOS.SosPost

<div class="card shadow-sm mb-4" id="post-@Model.Id">
    <div class="card-body">
        <div class="d-flex justify-content-between align-items-start">
            <div>
                <h5 class="mb-1">
                    @(!string.IsNullOrWhiteSpace(Model.Name) ? Model.Name : "Guest")
                    <small class="text-muted">(@Model.EmergencyType)</small>
                </h5>
                <div class="text-muted small">
                    <i class="fa-regular fa-clock me-1"></i>@Model.CreatedAt.ToLocalTime().ToString("g")
                    @if (!string.IsNullOrWhiteSpace(Model.Location))
                    {
                        <span class="ms-3"><i class="fa-solid fa-location-dot me-1"></i>@Model.Location</span>
                    }
                </div>
            </div>

            <div class="text-end">
                <span class="badge bg-@((Model.Status?.Equals("Completed", StringComparison.OrdinalIgnoreCase) ?? false) ? "success" : (Model.Status?.Equals("Urgent", StringComparison.OrdinalIgnoreCase) ?? false) ? "danger" : "warning") me-2">
                    @Model.Status
                </span>
                <span class="badge @(Model.IsAcceptingHelp ? "bg-primary" : "bg-secondary")">
                    @(Model.IsAcceptingHelp ? "Accepting help" : "Not accepting")
                </span>
            </div>
        </div>

        @if (!string.IsNullOrWhiteSpace(Model.Description))
        {
            <p class="mt-3 mb-2">@Model.Description</p>
        }

        @if (!string.IsNullOrWhiteSpace(Model.Contact))
        {
            <div class="small text-muted mb-2">
                <i class="fa-solid fa-phone me-1"></i>@Model.Contact
            </div>
        }

        @if (Model.Latitude.HasValue && Model.Longitude.HasValue)
        {
            <div class="small text-muted mb-3">
                <i class="fa-solid fa-location-crosshairs me-1"></i>
                Lat: @Model.Latitude.Value.ToString("F6"), Lng: @Model.Longitude.Value.ToString("F6")
            </div>
        }

        <div class="d-flex gap-2 mb-3">
            <!-- Toggle accepting help -->
            <form asp-controller="Sos" asp-action="ToggleAvailability" method="post" class="d-inline">
                @Html.AntiForgeryToken()
                <input type="hidden" name="id" value="@Model.Id" />
                <button type="submit" class="btn btn-sm @(Model.IsAcceptingHelp ? "btn-outline-primary" : "btn-primary")">
                    <i class="fa-solid fa-person-circle-check me-1"></i>
                    @(Model.IsAcceptingHelp ? "Pause accepting" : "Start accepting")
                </button>
            </form>

            <!-- Mark completed -->
            <form asp-controller="Sos" asp-action="MarkCompleted" method="post" class="d-inline">
                @Html.AntiForgeryToken()
                <input type="hidden" name="id" value="@Model.Id" />
                <button type="submit" class="btn btn-sm btn-success">
                    <i class="fa-solid fa-check me-1"></i> Mark completed
                </button>
            </form>

            <!-- Delete post -->
            <form asp-controller="Sos" asp-action="Delete" method="post" class="ms-auto">
                @Html.AntiForgeryToken()
                <input type="hidden" name="id" value="@Model.Id" />
                <button type="submit" class="btn btn-sm btn-outline-danger">
                    <i class="fa-solid fa-trash me-1"></i> Delete
                </button>
            </form>
        </div>

        <!-- New comment box -->
        <form asp-controller="Sos" asp-action="AddComment" method="post" class="mb-3">
            @Html.AntiForgeryToken()
            <input type="hidden" name="postId" value="@Model.Id" />
            <div class="input-group">
                <input type="text" name="message" class="form-control" placeholder="Write a comment..." required />
                <button class="btn btn-primary" type="submit">
                    <i class="fa-regular fa-paper-plane me-1"></i>Post
                </button>
            </div>
        </form>

        <!-- Comments -->
        @if (Model.Comments != null && Model.Comments.Any())
        {
            <div class="mt-3">
                @foreach (var c in Model.Comments.Where(x => x.ParentCommentId == null && !x.IsDeleted).OrderBy(x => x.CreatedAt))
                {
                    @await Html.PartialAsync("_CommentPartial", c)
                }
            </div>
        }
    </div>
</div>
