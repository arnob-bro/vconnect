@model VConnect.Models.NavViewModel
@inject VConnect.Services.IProfileDetailsService ProfileService
@using System.Security.Claims

@{
    var nav = Model ?? new VConnect.Models.NavViewModel();

    // Get current avatar - FETCH FROM DATABASE FOR REAL-TIME UPDATE
    string avatarUrl = Url.Content("~/images/avatar.png"); // default

    if (User?.Identity?.IsAuthenticated ?? false)
    {
        var userIdClaim = User.FindFirstValue(ClaimTypes.NameIdentifier);
        if (int.TryParse(userIdClaim, out int userId))
        {
            var profile = await ProfileService.GetByUserIdAsync(userId);
            if (profile != null && !string.IsNullOrWhiteSpace(profile.ProfilePictureUrl))
            {
                avatarUrl = profile.ProfilePictureUrl;
            }
        }
    }

    // Precompute login URL & active state so we don't declare code blocks inside other blocks
    var loginUrl = Url.Action("Login", "Account");
    bool loginActivePre = false; // initialize; will set after helper is defined
}

@functions {
    // Normalize a URL into just the app-relative path we can compare
    string NormalizeToAppPath(string? url, IUrlHelper urlHelper, HttpContext http)
    {
        if (string.IsNullOrWhiteSpace(url)) return "/";

        if (Uri.TryCreate(url, UriKind.Absolute, out var abs))
            return (abs.AbsolutePath ?? "/").TrimEnd('/').ToLowerInvariant();

        var resolved = urlHelper.Content(url) ?? "/";
        var pathBase = (http.Request.PathBase.HasValue ? http.Request.PathBase.Value : "") ?? "";
        if (!string.IsNullOrEmpty(pathBase) && resolved.StartsWith(pathBase, StringComparison.OrdinalIgnoreCase))
            resolved = resolved.Substring(pathBase.Length);

        return (string.IsNullOrEmpty(resolved) ? "/" : resolved).TrimEnd('/').ToLowerInvariant();
    }

    bool IsActiveUrl(string? url, bool startsWith = false)
    {
        var http = Context;
        var urlHelper = Url;
        var current = (http?.Request?.Path.Value ?? "/").TrimEnd('/').ToLowerInvariant();
        var target = NormalizeToAppPath(url, urlHelper, http);

        if (startsWith && target != "/")
            return current == target || current.StartsWith(target);

        return current == target;
    }
}

@{
    // Now that IsActiveUrl is available, compute the login active state
    loginActivePre = IsActiveUrl(loginUrl);
}

<header>
    <nav class="navbar navbar-expand-lg fixed-top navbar-dark" id="mainNav">
        <div class="container-fluid px-3 px-md-4 px-lg-5">
            <!-- Brand -->
            <a class="navbar-brand d-flex align-items-center" href="@Url.Content("~/")">
                <img src="@nav.LogoUrl" alt="Logo" class="navbar-logo">
            </a>

            <!-- Mobile toggler -->
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarResponsive"
                    aria-controls="navbarResponsive" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            
            <!-- Collapsible content -->
            <div class="collapse navbar-collapse" id="navbarResponsive">
                <!-- Left: nav items -->
                <ul class="navbar-nav mx-auto mb-2 mb-lg-0">
                    @foreach (var item in nav.Items)
                    {
                        var childActive = item.Children.Any(c => IsActiveUrl(c.Url, startsWith: true));
                        var itemActive = IsActiveUrl(item.Url) || childActive;

                        if (item.Children.Count > 0)
                        {
                            <li class="nav-item dropdown">
                                <a class="nav-link dropdown-toggle @(itemActive ? "active" : "")"
                                   href="@item.Url" id="navbarDropdown-@item.Text.Replace(" ", "")" role="button" data-bs-toggle="dropdown"
                                   aria-expanded="false" aria-haspopup="menu">
                                    @item.Text
                                </a>
                                <ul class="dropdown-menu" aria-labelledby="navbarDropdown-@item.Text.Replace(" ", "")">
                                    @foreach (var child in item.Children)
                                    {
                                        var childIsActive = IsActiveUrl(child.Url) || IsActiveUrl(child.Url, startsWith: true);
                                        <li>
                                            <a class="dropdown-item @(childIsActive ? "active" : "")" href="@child.Url">
                                                @child.Text
                                            </a>
                                        </li>
                                    }
                                </ul>
                            </li>
                        }
                        else
                        {
                            <li class="nav-item">
                                <a class="nav-link @(itemActive ? "active" : "")" href="@item.Url">
                                    @item.Text
                                </a>
                            </li>
                        }
                    }
                </ul>

                <!-- Right: Auth block -->
                <ul class="navbar-nav ms-auto mb-2 mb-lg-0">
                    @if (User?.Identity?.IsAuthenticated ?? false)
                    {
                        // Get avatar from updated claims first, then database if needed
                        var claimAvatar = User.FindFirst("ProfilePictureUrl")?.Value;
                        var finalAvatar = !string.IsNullOrWhiteSpace(claimAvatar) ? claimAvatar : avatarUrl;

                        <li class="nav-item dropdown">
                            <a class="nav-link dropdown-toggle d-flex align-items-center user-avatar" href="#" id="userMenu"
                               role="button" data-bs-toggle="dropdown" aria-expanded="false" aria-haspopup="menu">
                                <img src="@finalAvatar" alt="Profile" class="avatar-img">
                                <span class="d-none d-lg-inline ms-2">My Account</span>
                            </a>
                            <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="userMenu">
                                <li><a class="dropdown-item" asp-controller="Account" asp-action="Profile"><i class="fas fa-user me-2"></i>Profile</a></li>
                                <li><hr class="dropdown-divider" /></li>
                                <li>
                                    <form asp-controller="Account" asp-action="Logout" method="post" class="px-3 py-1">
                                        @Html.AntiForgeryToken()
                                        <button type="submit" class="btn btn-sm btn-outline-danger w-100">
                                            <i class="fas fa-sign-out-alt me-1"></i>Logout
                                        </button>
                                    </form>
                                </li>
                            </ul>
                        </li>
                    }
                    else
                    {
                        <li class="nav-item">
                            <a class="nav-link login-link @(loginActivePre ? "active" : "")" asp-controller="Account" asp-action="Login">
                                <i class="fas fa-sign-in-alt me-1 d-none d-md-inline"></i>Login
                            </a>
                        </li>
                    }
                </ul>
            </div>
        </div>
    </nav>
</header>

<style>



    /* Navbar styling */
    #mainNav {
        background: transparent;
        transition: background-color 0.3s ease, box-shadow 0.3s ease, padding 0.3s ease;
        padding: 0.75rem 0;
    }

        #mainNav.scrolled {
            background: linear-gradient(to bottom, rgba(11, 61, 46, 0.98), rgba(11, 61, 46, 0.95)) !important;
            box-shadow: 0 2px 15px rgba(0, 0, 0, 0.25);
            padding: 0.5rem 0;
        }

    .navbar-logo {
        height: 42px;
        transition: height 0.3s ease;
    }

    /* Nav links styling */
    .navbar-nav .nav-link {
        font-weight: 500;
        font-size: 1.05rem;
        margin: 0 0.65rem;
        color: rgba(255, 255, 255, 0.9) !important;
        padding: 0.5rem 0.75rem !important;
        position: relative;
        transition: all 0.25s ease;
        letter-spacing: 0.25px;
    }

        .navbar-nav .nav-link::after {
            content: '';
            position: absolute;
            width: 0;
            height: 2px;
            bottom: 0;
            left: 50%;
            background-color: #ffd700;
            transition: all 0.3s ease;
            transform: translateX(-50%);
        }

        .navbar-nav .nav-link:hover::after,
        .navbar-nav .nav-link.active::after {
            width: 75%;
        }

        .navbar-nav .nav-link:hover,
        .navbar-nav .nav-link.active {
            color: #ffd700 !important;
        }

    /* Dropdown menu styling */
    .dropdown-menu {
        background-color: white;
        border: 1px solid rgba(255, 215, 0, 0.25);
        border-radius: 6px;
        margin-top: 0.5rem;
        box-shadow: 0 8px 20px rgba(0, 0, 0, 0.2);
        padding: 0.5rem 0;
    }

    .dropdown-item {
        color: rgba(11, 61, 46, 0.98);
        padding: 0.6rem 1.25rem;
        transition: all 0.2s ease;
        font-size: 0.95rem;
        border-radius: 4px;
        margin: 0.15rem 0.5rem;
        width: auto;
    }

        .dropdown-item:hover,
        .dropdown-item:focus {
            background-color: rgba(255, 215, 0, 0.15);
            color: #ffd700;
        }

        .dropdown-item.active,
        .dropdown-item:active {
            background-color: #ffd700;
            color: #000;
        }

    /* User avatar styling */
    .user-avatar {
        padding: 0.35rem 0.6rem !important;
        border-radius: 50px;
        transition: background-color 0.3s ease;
        margin-left: 0.5rem;
    }

        .user-avatar:hover {
            background-color: rgba(255, 255, 255, 0.1);
        }

    .avatar-img {
        width: 38px;
        height: 38px;
        border-radius: 50%;
        object-fit: cover;
        border: 2px solid rgba(255, 215, 0, 0.7);
        transition: all 0.3s ease;
    }

    .user-avatar:hover .avatar-img {
        border-color: #ffd700;
    }

    .login-link {
        background-color: rgba(255, 215, 0, 0.15);
        border-radius: 50px;
        margin-left: 0.75rem;
        padding: 0.6rem 1.35rem !important;
        transition: all 0.3s ease;
        font-weight: 500;
        border: 1px solid transparent;
    }

        .login-link:hover {
            background-color: #ffd700;
            color: #000 !important;
            border-color: rgba(0, 0, 0, 0.1);
        }

        .login-link.active {
            background-color: #ffd700;
            color: #000 !important;
        }

    /* Improved alignment for navbar content */
    .navbar-collapse {
        flex-grow: 0;
    }

    .navbar-nav .nav-item {
        display: flex;
        align-items: center;
    }

    /* Media queries for responsive design */
    @@media (max-width: 1199.98px) {
        .navbar-nav .nav-link

    {
        margin: 0 0.5rem;
        font-size: 1rem;
    }

    }

    @@media (max-width: 991.98px) {
        #mainNav

    {
        background: #0b3d2e !important;
        padding: 0.5rem 1rem;
    }

    .navbar-nav {
        padding: 0.75rem 0;
    }

        .navbar-nav .nav-link {
            margin: 0.15rem 0;
            padding: 0.65rem 1rem !important;
            font-size: 1.05rem;
        }

            .navbar-nav .nav-link::after {
                display: none;
            }

    .dropdown-menu {
        background-color: rgba(11, 61, 46, 0.95);
        margin-left: 1rem;
        border: none;
        box-shadow: none;
        width: calc(100% - 2rem);
    }

    .dropdown-item {
        padding: 0.65rem 1.25rem;
        margin: 0.1rem 0;
    }

    .login-link {
        margin: 0.5rem 0;
        display: inline-block;
        width: auto;
        max-width: 150px;
    }

    .user-avatar {
        margin: 0.5rem 0;
        padding: 0.5rem !important;
    }

    .navbar-collapse {
        padding-bottom: 1rem;
    }

    }

    @@media (max-width: 767.98px) {
        .navbar-logo

    {
        height: 38px;
    }

    .container-fluid {
        padding-left: 0.75rem;
        padding-right: 0.75rem;
    }

    }

    @@media (max-width: 575.98px) {
        .navbar-logo

    {
        height: 36px;
    }

    .navbar-brand {
        margin-right: 0;
    }

    .container-fluid {
        padding-left: 0.5rem;
        padding-right: 0.5rem;
    }

    .navbar-nav .nav-link {
        font-size: 1rem;
        padding: 0.6rem 0.9rem !important;
    }

    .avatar-img {
        width: 36px;
        height: 36px;
    }

    .login-link {
        padding: 0.55rem 1.25rem !important;
        font-size: 0.95rem;
    }

    }
</style>

<script>
    // Add scroll event listener to toggle navbar background
    document.addEventListener('DOMContentLoaded', function() {
        const navbar = document.getElementById('mainNav');

        window.addEventListener('scroll', function() {
            if (window.scrollY > 50) {
                navbar.classList.add('scrolled');
            } else {
                navbar.classList.remove('scrolled');
            }
        });

        // Initialize on page load in case page is already scrolled
        if (window.scrollY > 50) {
            navbar.classList.add('scrolled');
        }
    });
</script>