@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@{
    // Optional: pass returnUrl back to Feed after submit
    var returnUrl = Url.Action("Index", "Feed");
}

<!-- Floating SOS Button -->
<div class="sos-container">
    <button class="sos-button pulse" id="sosButton" aria-label="Emergency SOS button">
        <i class="fas fa-life-ring"></i>
    </button>
</div>

<!-- Modal -->
<div class="sos-modal" id="sosModal" aria-hidden="true">
    <div class="modal-content" role="dialog" aria-modal="true" aria-labelledby="sosTitle">
        <div class="modal-header">
            <h2 id="sosTitle"><i class="fas fa-exclamation-triangle"></i> Emergency Help Request</h2>
            <button type="button" class="close-modal" id="closeModal" aria-label="Close">&times;</button>
        </div>

        <!-- Real form that hits SosController.Create -->
        <form asp-controller="Sos" asp-action="Create" method="post" id="emergencyForm">
            @Html.AntiForgeryToken()

            <!-- keep returnUrl so we land back on feed -->
            <input type="hidden" name="returnUrl" value="@returnUrl" />

            <!-- Hidden fields the DTO might need -->
            <input type="hidden" id="Latitude" name="Latitude" />
            <input type="hidden" id="Longitude" name="Longitude" />
            <input type="hidden" id="EmergencyType" name="EmergencyType" />

            <div class="form-group">
                <label for="Name">Your Name</label>
                <input type="text" id="Name" name="Name" class="form-control" placeholder="Enter your name">
            </div>

            <div class="form-group">
                <label for="Contact">Phone Number / Email</label>
                <input type="text" id="Contact" name="Contact" class="form-control" placeholder="Enter phone number or email">
            </div>

            <div class="form-group">
                <label for="Location">Your Location</label>
                <div class="location-group">
                    <input type="text" id="Location" name="Location" class="form-control" placeholder="Enter your location">
                    <button type="button" class="detect-location" id="detectLocation">
                        <i class="fas fa-location-arrow"></i> Detect
                    </button>
                </div>
                <div class="location-status" id="locationStatus"></div>
            </div>

            <div class="form-group">
                <label>Type of Emergency</label>
                <div class="emergency-type-grid">
                    <div class="emergency-option" data-type="fire">
                        <i class="fas fa-fire"></i><div>Fire</div>
                    </div>
                    <div class="emergency-option" data-type="accident">
                        <i class="fas fa-car-crash"></i><div>Accident</div>
                    </div>
                    <div class="emergency-option" data-type="flood">
                        <i class="fas fa-water"></i><div>Flood</div>
                    </div>
                    <div class="emergency-option" data-type="medical">
                        <i class="fas fa-heartbeat"></i><div>Medical</div>
                    </div>
                    <div class="emergency-option" data-type="other">
                        <i class="fas fa-exclamation-circle"></i><div>Other</div>
                    </div>
                </div>
            </div>

            <div class="form-group">
                <label for="Description">Emergency Description</label>
                <textarea id="Description" name="Description" class="form-control" rows="4" placeholder="Please describe the emergency situation"></textarea>
            </div>

            <button type="submit" class="submit-btn">
                <i class="fas fa-paper-plane"></i> Send Emergency Alert
            </button>
        </form>
    </div>
</div>

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
<style>
    .sos-container {
        position: fixed;
        bottom: 30px;
        right: 30px;
        z-index: 10000;
    }

    .sos-button {
        width: 70px;
        height: 70px;
        border-radius: 50%;
        background: linear-gradient(135deg, #ff3b30, #d70015);
        color: white;
        display: flex;
        justify-content: center;
        align-items: center;
        font-size: 20px;
        font-weight: bold;
        box-shadow: 0 6px 15px rgba(255, 59, 48, 0.4);
        cursor: pointer;
        transition: all 0.3s ease;
        border: none;
    }

        .sos-button:hover {
            transform: scale(1.1);
            box-shadow: 0 8px 20px rgba(255, 59, 48, 0.6);
        }

        .sos-button:active {
            transform: scale(0.95);
        }
    @@keyframes pulse {
        0%

    {
        box-shadow: 0 0 0 0 rgba(255,59,48,.7);
    }

    70% {
        box-shadow: 0 0 0 15px rgba(255,59,48,0);
    }

    100% {
        box-shadow: 0 0 0 0 rgba(255,59,48,0);
    }

    }

    .sos-button.pulse {
        animation: pulse 2s infinite;
    }

    .sos-modal {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.6);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 10001;
        opacity: 0;
        visibility: hidden;
        transition: all 0.3s ease;
    }

        .sos-modal.show {
            opacity: 1;
            visibility: visible;
        }

    .modal-content {
        background: white;
        border-radius: 12px;
        padding: 25px;
        width: 90%;
        max-width: 500px;
        transform: scale(0.9);
        transition: all 0.3s ease;
        max-height: 90vh;
        overflow-y: auto;
    }

    .sos-modal.show .modal-content {
        transform: scale(1);
    }

    .modal-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
        padding-bottom: 15px;
        border-bottom: 1px solid #eee;
    }

        .modal-header h2 {
            margin: 0;
            color: #dc3545;
            font-size: 22px;
            display: flex;
            align-items: center;
            gap: 10px;
        }

    .close-modal {
        background: none;
        border: none;
        font-size: 24px;
        cursor: pointer;
        color: #999;
        transition: color 0.2s;
    }

        .close-modal:hover {
            color: #333;
        }

    .form-group {
        margin-bottom: 20px;
    }

        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 500;
            color: #333;
        }

    .form-control {
        width: 100%;
        padding: 12px 15px;
        border: 1px solid #ddd;
        border-radius: 6px;
        font-size: 16px;
        transition: border-color 0.2s;
    }

        .form-control:focus {
            border-color: #dc3545;
            outline: none;
        }

    .location-group {
        display: flex;
        gap: 10px;
    }

        .location-group .form-control {
            flex: 1;
        }

    .detect-location {
        background: #f8f9fa;
        border: 1px solid #ddd;
        border-radius: 6px;
        padding: 0 15px;
        cursor: pointer;
        transition: all 0.2s;
        white-space: nowrap;
    }

        .detect-location:hover {
            background: #e9ecef;
        }

    .location-status {
        font-size: 14px;
        margin-top: 5px;
        color: #6c757d;
        display: flex;
        align-items: center;
        gap: 5px;
    }

        .location-status.success {
            color: #28a745;
        }

        .location-status.error {
            color: #dc3545;
        }

    .emergency-type-grid {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 10px;
        margin-bottom: 20px;
    }

    .emergency-option {
        border: 2px solid #e9ecef;
        border-radius: 8px;
        padding: 15px;
        text-align: center;
        cursor: pointer;
        transition: all 0.2s;
    }

        .emergency-option:hover {
            border-color: #dc3545;
            background: #fff5f5;
        }

        .emergency-option.selected {
            border-color: #dc3545;
            background: #fff5f5;
        }

        .emergency-option i {
            font-size: 24px;
            margin-bottom: 10px;
            display: block;
            color: #dc3545;
        }

    .submit-btn {
        width: 100%;
        padding: 15px;
        background: #dc3545;
        color: white;
        border: none;
        border-radius: 6px;
        font-size: 16px;
        font-weight: 500;
        cursor: pointer;
        transition: background 0.2s;
    }

        .submit-btn:hover {
            background: #c82333;
        }

    @@media (max-width: 768px) {
        .sos-container

    {
        bottom: 20px;
        right: 20px;
    }

    .sos-button {
        width: 60px;
        height: 60px;
        font-size: 18px;
    }

    .emergency-type-grid {
        grid-template-columns: 1fr;
    }

    }
    @@media (max-width: 576px) {
        .sos-container

    {
        bottom: 15px;
        right: 15px;
    }

    .sos-button {
        width: 55px;
        height: 55px;
        font-size: 16px;
    }

    .modal-content {
        padding: 20px 15px;
    }

    .location-group {
        flex-direction: column;
    }

    }
    @@media (prefers-reduced-motion: reduce) {
        .sos-button, .sos-modal, .modal-content

    {
        transition: none;
    }

    .sos-button.pulse {
        animation: none;
    }

    }
</style>

<script>
    // Open/close modal
    (function () {
        const btn = document.getElementById('sosButton');
        const modal = document.getElementById('sosModal');
        const closeBtn = document.getElementById('closeModal');

        function openModal() {
            modal.classList.add('show');
            modal.setAttribute('aria-hidden', 'false');
            document.body.style.overflow = 'hidden';
        }
        function closeModal() {
            modal.classList.remove('show');
            modal.setAttribute('aria-hidden', 'true');
            document.body.style.overflow = '';
        }

        btn?.addEventListener('click', openModal);
        closeBtn?.addEventListener('click', closeModal);
        modal?.addEventListener('click', (e) => { if (e.target === modal) closeModal(); });
        document.addEventListener('keydown', (e) => { if (e.key === 'Escape' && modal.classList.contains('show')) closeModal(); });
    })();

    // Emergency type selection -> sets hidden input "EmergencyType"
    (function () {
        const opts = document.querySelectorAll('.emergency-option');
        const hidden = document.getElementById('EmergencyType');
        opts.forEach(opt => {
            opt.addEventListener('click', function () {
                opts.forEach(o => o.classList.remove('selected'));
                this.classList.add('selected');
                hidden.value = this.getAttribute('data-type');
            });
        });
    })();

    // Detect location -> fills Location + lat/lng
    (function () {
        const detectBtn = document.getElementById('detectLocation');
        const locationInput = document.getElementById('Location');
        const status = document.getElementById('locationStatus');
        const latEl = document.getElementById('Latitude');
        const lngEl = document.getElementById('Longitude');

        detectBtn?.addEventListener('click', function () {
            status.textContent = 'Detecting location...';
            status.className = 'location-status';
            if (!navigator.geolocation) {
                status.textContent = 'Geolocation is not supported by this browser.';
                status.className = 'location-status error';
                return;
            }
            navigator.geolocation.getCurrentPosition(
                function (pos) {
                    const { latitude, longitude } = pos.coords;
                    latEl.value = latitude.toFixed(6);
                    lngEl.value = longitude.toFixed(6);
                    locationInput.value = `Lat: ${latitude.toFixed(6)}, Long: ${longitude.toFixed(6)}`;
                    status.innerHTML = '<i class="fas fa-check-circle"></i> Location detected successfully';
                    status.className = 'location-status success';
                },
                function (error) {
                    const map = {
                        1: 'Location access denied by user',
                        2: 'Location information unavailable',
                        3: 'Location request timed out'
                    };
                    status.innerHTML = `<i class="fas fa-exclamation-circle"></i> ${map[error.code] || 'Unknown error'}`;
                    status.className = 'location-status error';
                },
                { enableHighAccuracy: true, timeout: 10000, maximumAge: 60000 }
            );
        });
    })();

    // Basic client-side guard so you don’t post empty type
    document.getElementById('emergencyForm')?.addEventListener('submit', function (e) {
        const type = document.getElementById('EmergencyType').value;
        if (!type) {
            e.preventDefault();
            alert('Please select the type of emergency.');
        }
    });
</script>
